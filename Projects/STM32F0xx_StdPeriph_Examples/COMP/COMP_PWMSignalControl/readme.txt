/**
  @page COMP_PWMSignalControl COMP2 PWM signal control example
  
  @verbatim
  ******************** (C) COPYRIGHT 2014 STMicroelectronics *******************
  * @file    COMP/COMP_PWMSignalControl/readme.txt 
  * @author  MCD Application Team
  * @version V1.6.0
  * @date    13-October-2021
  * @brief   Description of the COMP2 PWM signal control example.
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2014 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
   @endverbatim

@par Example Description 

This example shows how to configure COMP2 peripheral to hold on safe state
(low level) TIM1 channels as soon as COMP2 output is set at high level.

  - COMP2 is configured as following:
     - Inverting input is internally connected to VREFINT = 1.22V
     - Non Inverting input is connected to PA3
     - Output is internally connected to TIM2 BKIN (Break Input)

  - TIM1CLK is set to 48 MHz, the TIM1 Prescaler is equal to 0 so the TIM1 counter
    clock used is 48 MHz.
    TIM1 frequency is defined as follow:
    TIM1 channels frequency = TIM1 counter clock / (Period + 1) 
                            = 48000000 /(100 + 1) 
                            = 475 KHz.

  - External voltage should be connected to PA3 (RV3 potentiometer can be used).

  - Connect an oscilloscope to TIM1 channel PA8 to display waveform. 

  - While PA3 is lower than VREFINT (1.22V), PWM signal is displayed on PA8.
    While PA3 is higher than VREFINT, PA8 is in low level.
 

@par Directory contents 

  - COMP/COMP_PWMSignalControl/stm32f0xx_conf.h    Library Configuration file
  - COMP/COMP_PWMSignalControl/stm32f0xx_it.c      Interrupt handlers
  - COMP/COMP_PWMSignalControl/stm32f0xx_it.h      Interrupt handlers header file
  - COMP/COMP_PWMSignalControl/main.c              Main program
  - COMP/COMP_PWMSignalControl/main.h              Main program  header file
  - COMP/COMP_PWMSignalControl/system_stm32f0xx.c  STM32F0xx system source file
  
@note The "system_stm32f0xx.c" is generated by an automatic clock configuration 
      tool and can be easily customized to meet user application requirements. 
      To select different clock setup, use the "STM32F0xx_Clock_Configuration_VX.Y.Z.xls" 
      provided with the AN4055 package available on <a href="http://www.st.com/internet/mcu/class/1734.jsp">  ST Microcontrollers </a>
         
@par Hardware and Software environment

  - This example runs on STM32F0xx Devices.
  
  - This example has been tested with STMicroelectronics STM320518-EVAL and
    STM32072B-EVAL including respectively STM32F051R8T6 and STM32F072VBT6 devices
    and can be easily tailored to any other supported device and development board.

  - STM320518-EVAL Set-up
    - RV3 Potentiometer connected to PC.01 pin.
    - Connect PA.03 to PC.01 pin using a wire.
    - Connect an oscilloscope to PA.08 pin to display waveform.
  - STM32072B-EVAL Set-up
    - RV3 Potentiometer connected to PC.00 pin.
    - Connect PA.03 to PC.00 pin using a wire.
    - Connect an oscilloscope to PA.08 pin to display waveform.

@par How to use it ? 

In order to make the program work, you must do the following :
 - Copy all source files from this example folder to the template folder under
   Project\STM32F0xx_StdPeriph_Templates
 - Open your preferred toolchain 
 - Select the appropriate workspace
 - Rebuild all files and load your image into target memory
 - Run the example

 */
