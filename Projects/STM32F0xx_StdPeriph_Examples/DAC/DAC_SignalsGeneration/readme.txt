/**
  @page DAC_SignalsGen DAC Signals generation example
  
  @verbatim
  ******************** (C) COPYRIGHT 2014 STMicroelectronics *******************
  * @file    DAC/DAC_SignalsGeneration/readme.txt 
  * @author  MCD Application Team
  * @version V1.6.0
  * @date    13-October-2021
  * @brief   Description of the DAC Signals generation example.
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2014 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
   @endverbatim

@par Example Description 

This example provides a short description of how to use the DAC peripheral to 
generate several signals using DMA controller.
When the user presses the Tamper push-button, DMA transfers the two selected 
waveforms to DAC.
For each press on Tamper button, 2 signals has been selected and monitored on the 
two dac channels:
    - Sine waveForm (Channel 1) and Escalator waveform (Channel 2).
    - Noise waveform (Channel 1) and Triangle waveform (Channel 2).

    @note The Dual DAC Channels is only available for the STM32F072, STM32F042 
          and STM32F091 devices.
    @note For the STM32F051, STM32F031 and STM32F030 devices, one signal has been 
          selected and monitored on the DAC Channel1
              - Escalator waveForm (Channel 1).
              - Sine waveform (Channel 1).

@par Directory contents 

  - DAC/DAC_SignalsGeneration/stm32f0xx_conf.h    Library Configuration file
  - DAC/DAC_SignalsGeneration/stm32f0xx_it.c      Interrupt handlers
  - DAC/DAC_SignalsGeneration/stm32f0xx_it.h      Interrupt handlers header file
  - DAC/DAC_SignalsGeneration/main.c              Main program
  - DAC/DAC_SignalsGeneration/main.h              Header for main.c module
  - DAC/DAC_SignalsGeneration/system_stm32f0xx.c  STM32F0xx system source file
  
@note The "system_stm32f0xx.c" is generated by an automatic clock configuration 
      tool and can be easily customized to meet user application requirements. 
      To select different clock setup, use the "STM32F0xx_Clock_Configuration_VX.Y.Z.xls" 
      provided with the AN4055 package available on <a href="http://www.st.com/internet/mcu/class/1734.jsp">  ST Microcontrollers </a>
         
@par Hardware and Software environment

  - This example runs on STM32F0xx devices.
  
  - This example has been tested with STMicroelectronics STM320518-EVAL and
    STM32072B-EVAL including respectively STM32F051R8T6 and STM32F072VBT6 devices
    and can be easily tailored to any other supported device and development board

  - STM320518-EVAL Set-up
     - Use TAMPER push-button connected to PC13.
     - Connect PA4 (DAC Channel1) pin to an oscilloscope.
     - Make sure that JP13 is open.
  - STM32072B-EVAL Set-up
     - Use TAMPER push-button connected to PC13.
     - Connect PA4 (DAC Channel1) and PA5 (DAC Channel2) pins to an oscilloscope.
     - Make sure that JP20 is open.

@par How to use it ? 

In order to make the program work, you must do the following :
 - Copy all source files from this example folder to the template folder under
   Project\STM32F0xx_StdPeriph_Templates
 - Open your preferred toolchain 
 - If the used device is STM32F051R8T6 choose STM32F051 project
     - Add the following files to the project source list
        - Utilities\STM32_EVAL\STM320518_EVAL\stm320518_eval.c
 - If the used device is STM32F072VBT6 choose STM32F072 project
      - Add the following files to the project source list
        - Utilities\STM32_EVAL\STM32072B_EVAL\stm32072b_eval.c
 - Rebuild all files and load your image into target memory
 - Run the example

 */
