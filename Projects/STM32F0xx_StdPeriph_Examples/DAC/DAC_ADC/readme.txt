/**
  @page DAC_ADC Loopback DAC to ADC example
  
  @verbatim
  ******************** (C) COPYRIGHT 2014 STMicroelectronics *******************
  * @file    DAC/DAC_ADC/readme.txt 
  * @author  MCD Application Team
  * @version V1.6.0
  * @date    13-October-2021
  * @brief   Loopback DAC to ADC example Description.
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2014 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
   @endverbatim

@par Example Description 

This example describes how to use the ADC1 and DAC to output on DAC_OUT1 sampled
values of ADC1.
The ADC1 is configured to convert continuously ADC1 channel11 (PC.01) if the used device is 
STM32F051R8T6 or ADC1 channel10 (PC.00) if the used device is STM32F072VBT6.
The End Of Conversion (EOC) interrupt is enabled and the conversion is triggered by software.

The DAC channel 1 is configured with output buffer enabled.

Each time the end of conversion interrupt occurs, converted value by ADC1 is written
in DAC channel 1 register.
Thus applied voltage on ADC1 channel is outputted on DAC_OUT1 (PA4).


@par Directory contents 

  - DAC/DAC_ADC/stm32f0xx_conf.h    Library Configuration file
  - DAC/DAC_ADC/stm32f0xx_it.c      Interrupt handlers
  - DAC/DAC_ADC/stm32f0xx_it.h      Interrupt handlers header file
  - DAC/DAC_ADC/main.c              Main program
  - DAC/DAC_ADC/main.h              Header for main.c module
  - DAC/DAC_ADC/system_stm32f0xx.c  STM32F0xx system source file
  
@note The "system_stm32f0xx.c" is generated by an automatic clock configuration 
      tool and can be easily customized to meet user application requirements. 
      To select different clock setup, use the "STM32F0xx_Clock_Configuration_VX.Y.Z.xls" 
      provided with the AN4055 package available on <a href="http://www.st.com/internet/mcu/class/1734.jsp">  ST Microcontrollers </a>

         
@par Hardware and Software environment

  - This example runs on STM32F0xx devices.
  
  - This example has been tested with STMicroelectronics STM320518-EVAL and
    STM32072B-EVAL including respectively STM32F051R8T6 and STM32F072VBT6 devices
    and can be easily tailored to any other supported device and development board.

  - STM320518-EVAL Set-up
    - Connect a variable power supply 0-3.3V to ADC1 Channel11 mapped on pin PC.01
      (potentiometer RV3 can be used).
    - Connect PA4 (DAC_OUT1) pin to an oscilloscope.
  - STM32072B-EVAL Set-up
    - Connect a variable power supply 0-3.3V to ADC1 Channel10 mapped on pin PC.00
      (potentiometer RV3 can be used).
    - Connect PA4 (DAC_OUT1) pin to an oscilloscope.


@par How to use it ? 

In order to make the program work, you must do the following :
 - Copy all source files from this example folder to the template folder under
   Project\STM32F0xx_StdPeriph_Templates
 - Open your preferred toolchain 
 - Select the appropriate workspace 
 - Rebuild all files and load your image into target memory
 - Run the example

 */
